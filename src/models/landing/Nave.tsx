/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 Nave_v2.0.152.glb -t -s -T 
Files: Nave_v2.0.152.glb [98.52MB] > C:\Users\unime\OneDrive\Documentos\Semillero de investigacion\portfolio-cbtic\public\Models\cbtic\Nave_v2.0.152-transformed.glb [5.3MB] (95%)
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useMaterials } from "@/hooks";

type GLTFResult = GLTF & {
  nodes: {
    Cube030: THREE.Mesh;
    Cube030_1: THREE.Mesh;
    Cylinder: THREE.Mesh;
    Cylinder006: THREE.Mesh;
    Cylinder007: THREE.Mesh;
    floor: THREE.Mesh;
    Plane_1: THREE.Mesh;
    Plane_2: THREE.Mesh;
    Torus005: THREE.Mesh;
    Cube015: THREE.Mesh;
    Cube015_1: THREE.Mesh;
    wall3: THREE.Mesh;
  };
  materials: {
    wall1: THREE.MeshStandardMaterial;
    tela: THREE.MeshStandardMaterial;
    floor2: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
    floor: THREE.MeshStandardMaterial;
    door: THREE.MeshStandardMaterial;
    doorEmission: THREE.MeshStandardMaterial;
    ["material-field"]: THREE.MeshStandardMaterial;
    objectBorder: THREE.MeshStandardMaterial;
    wall2: THREE.MeshStandardMaterial;
    wall3: THREE.MeshStandardMaterial;
  };
  // animations: GLTFAction[]
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Nave(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/Models/cbtic/Nave_v2.0.152-transformed.glb"
  ) as GLTFResult;
  const wall1 = useMaterials(
    "Models/cbtic/texture/wall/",
    "MetalPlates006_2K",
    15,
    true
  );
  const wall2 = useMaterials(
    "Models/cbtic/texture/wall/",
    "MetalPlates001_2K",
    10,
    true,
    { normalScale: new THREE.Vector2(5, 5), metalness: 1 }
  );
  const wall3 = useMaterials(
    "Models/cbtic/texture/wall/",
    "MetalPlates014_2K",
    10,
    true,
    { normalScale: new THREE.Vector2(5, 5), metalness: 1, roughness: 0.5 }
  )
  const door = useMaterials(
    "Models/cbtic/texture/wall/",
    "MetalPlates004_2K",
    10,
    true,
    { normalScale: new THREE.Vector2(5, 5), metalness: 1, roughness: 0.5 }
  )
  const tela = useMaterials(
    "Models/cbtic/texture/objects/",
    "Fabric031_2K",
    15,
    false,
    { color: 0xff0000, normalScale: new THREE.Vector2(20, 20) }
  );
  const floor1 = useMaterials(
    "Models/cbtic/texture/floor/",
    "DiamondPlate008C_2K",
    30,
    true,
    { color: new THREE.Color(0.541, 0.541, 0.541) }
  )
  const floor2 = useMaterials(
    "Models/cbtic/texture/floor/",
    "Metal038_2K",
    15,
    true,
    { color: new THREE.Color(1, 0.984, 0), normalScale: new THREE.Vector2(20, 20)  }
  )
  const objectBorder = useMaterials(
    "Models/cbtic/texture/objects/",
    "Metal036_2K",
    15,
    true,
    { color: new THREE.Color(1, 0.984, 0), normalScale: new THREE.Vector2(20, 20)  }
  )

  const display = new THREE.MeshBasicMaterial({
    color: new THREE.Color(100,1,1),
    // emissive:{ b: 1,g: 0.5109990835189819,isColor: true}
  });
  console.log("ðŸš€ ~ Nave", materials["material-field"])
  return (
    <group {...props} dispose={null}>
      <group position={[20.379, -0.438, 30.621]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube030.geometry}
          material={wall1}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube030_1.geometry}
          material={tela}
        />
      </group>
      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder.geometry}
        material={nodes.Cylinder.material}
        position={[15.592, 12.564, 0.092]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.562}
      /> */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder006.geometry}
        material={floor2}
        position={[-14.484, 1.868, -9.661]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
        scale={0.562}
      />

      {/* TUBOS */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder007.geometry}
        material={materials["Material.001"]}
        position={[-13.733, -4.052, 0.092]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.562}
      />
      
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.floor.geometry}
        material={floor1}
        position={[0, -6.508, -10.828]}
      />
      <group
        position={[-1.028, 2.678, -11.129]}
        rotation={[-Math.PI / 2, Math.PI / 2, 0]}
        scale={10.184}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane_1.geometry}
          material={door}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane_2.geometry}
          material={display}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Torus005.geometry}
        material={materials["material-field"]}
        position={[-0.564, 11.669, 28.988]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.721}
      />
      <group position={[20.455, -5.737, 18.37]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube015.geometry}
          material={objectBorder}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube015_1.geometry}
          material={wall2}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wall3.geometry}
        material={wall3}
        position={[19.379, -0.825, 0]}
      />
    </group>
  );
}
 

useGLTF.preload("/Nave_v2.0.152-transformed.glb");
