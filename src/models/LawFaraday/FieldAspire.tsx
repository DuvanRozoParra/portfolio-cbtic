/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 fieldAspire.glb -t -i -T -f 
Files: fieldAspire.glb [2.74MB] > D:\Duvan\portfolio-cbtic\public\Models\lawfaraday\fieldAspire-transformed.glb [72.82KB] (97%)
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { PATH_LAW_FARADAY } from "@/config";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useMove } from "@store";
import { GLTF } from "three-stdlib";
import { g } from "math";

type GLTFResult = GLTF & {
  nodes: {
    FIELD_ASPIRE: THREE.Mesh;
  };
  materials: {
    Emission: THREE.MeshStandardMaterial;
  };
  // animations: GLTFAction[]
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    PATH_LAW_FARADAY + "/fieldAspire-transformed.glb",
  ) as GLTFResult;
  const tempX = useRef<number>(0);
  const refFieldAspire = useRef<THREE.Group>(null!);

  useFrame(() => {
    // This function runs at the native refresh rate inside of a shared render-loop
    const x = useMove.getState().moveX; // Obtiene el valor de x
    const state = useMove.getState();

    if (x > tempX.current) {
      // refFieldAspire.current.rotation.x = g(180);
      refFieldAspire.current.rotation.x = g(180);
      refFieldAspire.current.position.z = -464.994 * 2;
    } else if (x < tempX.current) {
      refFieldAspire.current.rotation.x = g(0);
      refFieldAspire.current.position.z = 0;
    }
    tempX.current = x;
  });
  return (
    <group {...props} dispose={null} ref={refFieldAspire}>
      <mesh
        geometry={nodes.FIELD_ASPIRE.geometry}
        material={materials.Emission}
        position={[0, 0, -464.994]}
        scale={3.692}
      />
    </group>
  );
}
