/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 desktopAndInteractividad.glb -t -s 
*/

import * as THREE from "three";
import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { GLTF } from "three-stdlib";
import { Interactive } from "@react-three/xr";
import { BoxCollider } from "@/models/LawFaraday"

type GLTFResult = GLTF & {
  nodes: {
    mesa: THREE.Mesh;
    aspire: THREE.Mesh;
    fields: THREE.Mesh;
    support2: THREE.Mesh;
    support1: THREE.Mesh;
    NurbsCircle: THREE.Mesh;
    circleNorte: THREE.Mesh;
    circleSur: THREE.Mesh;
    NurbsPath: THREE.Mesh;
    NurbsPath001: THREE.Mesh;
    cableNorte: THREE.Mesh;
    cableSur: THREE.Mesh;
    Cube007: THREE.Mesh;
    Cube007_1: THREE.Mesh;
    Text002: THREE.Mesh;
    Text002_1: THREE.Mesh;
    fieldPrimary: THREE.Mesh;
    Cube002: THREE.Mesh;
    Cube002_1: THREE.Mesh;
    Cube008: THREE.Mesh;
    Cube008_1: THREE.Mesh;
    ["let"]: THREE.Mesh;
    paper1: THREE.Mesh;
    paper2: THREE.Mesh;
    paper3: THREE.Mesh;
    Cylinder: THREE.Mesh;
    Cylinder_1: THREE.Mesh;
    Cube005: THREE.Mesh;
    Cube005_1: THREE.Mesh;
    Cube009: THREE.Mesh;
    Cube009_1: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["material-field"]: THREE.MeshStandardMaterial;
    ["Material.005"]: THREE.MeshStandardMaterial;
    positive: THREE.MeshStandardMaterial;
    ["Material.004"]: THREE.MeshStandardMaterial;
    BOX01: THREE.MeshStandardMaterial;
    ["TEXT.001"]: THREE.MeshStandardMaterial;
    ["TEXT.002"]: THREE.MeshStandardMaterial;
    wood: THREE.MeshStandardMaterial;
    border: THREE.MeshStandardMaterial;
    ["display-desktop"]: THREE.MeshStandardMaterial;
    ["let"]: THREE.MeshStandardMaterial;
    paper: THREE.MeshStandardMaterial;
    ["support-coocnet"]: THREE.MeshStandardMaterial;
    ["background-table"]: THREE.MeshStandardMaterial;
  };
  // animations: GLTFAction[]
};

const points = [
  [0, 0.85, 0.25],
  [0, 0.85, 0.4],
  [0, 0.85, 0.1],
  [0, 0.97, 0.25],
  [0, 0.72, 0.25],
  [0, 0.97, 0.4],
  [0, 0.97, 0.1],
  [0, 0.72, 0.4],
  [0, 0.72, 0.1],
];

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

// const rotateP =  new THREE.Euler(180 * Math.PI / 180, 2, 0);
// const rotateN =  new THREE.Euler(0, 0, 0);
export function LawFaradayModel(props: JSX.IntrinsicElements["group"]) {
  const prevNumberFields = useRef<number>(0);
  const refFields = useRef<THREE.Mesh>(null!);
  const [renderFields, setFields] = useState<number>(0);

  const showLess = () => {
    if (renderFields > 1) {
      setFields(renderFields - 1);
      // refFields.current.rotateX((180 * Math.PI) / 180);
      prevNumberFields.current = renderFields;
    }
  };

  const showMore = () => {
    if (renderFields < points.length) {
      setFields(renderFields + 1);
      prevNumberFields.current = renderFields;
    }
  };

  useFrame(() => {
    if (renderFields < prevNumberFields.current)
      refFields.current.rotation.x = 0;
    else refFields.current.rotation.x = (180 * Math.PI) / 180;
  });

  const { nodes, materials } = useGLTF(
    "/Models/lawfaraday/desktopAndInteractividad.glb"
  ) as GLTFResult;

  return (
    <group {...props} dispose={null}>

      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesa.geometry}
        material={materials["Material.001"]}
        position={[0.076, 0.516, -0.097]}
        rotation={[-Math.PI, 0.976, -Math.PI]}
        scale={[0.572, 0.027, 0.568]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.aspire.geometry}
        material={materials["Material.003"]}
        position={[0.311, 0.855, 0.031]}
        rotation={[Math.PI / 2, 0, -2.165]}
        scale={0.182}
      />
      {/* FIELDS ASPIRE */}
      <group
        position={[0.311, 0.855, 0.031]}
        rotation={[Math.PI / 2, 0, -2.165]}
      >
        <mesh
          ref={refFields}
          castShadow
          receiveShadow
          geometry={nodes.fields.geometry}
          material={materials["material-field"]}
          rotation={[0, 0, 0]}
          // position={[0.311, 0.855, 0.031]}
          // rotation={[Math.PI / 2, 0, -2.165]}
          scale={0.026}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.support2.geometry}
        material={materials["Material.005"]}
        position={[0.387, 0.654, 0.141]}
        rotation={[-Math.PI, 0.976, -Math.PI]}
        scale={[0.014, 0.057, 0.011]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.support1.geometry}
        material={materials["Material.005"]}
        position={[0.239, 0.654, -0.078]}
        rotation={[-Math.PI, 0.976, -Math.PI]}
        scale={[0.014, 0.057, 0.011]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.NurbsCircle.geometry}
        material={nodes.NurbsCircle.material}
        position={[0.209, 0.529, 0.099]}
        rotation={[-Math.PI, 0.976, -Math.PI]}
        scale={0.095}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.circleNorte.geometry}
        material={materials.positive}
        position={[-0.008, 0.85, -0.442]}
        rotation={[Math.PI / 2, 0, 2.547]}
        scale={0.072}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.circleSur.geometry}
        material={materials["Material.004"]}
        position={[0.088, 0.85, -0.297]}
        rotation={[Math.PI / 2, 0, 2.547]}
        scale={0.072}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.NurbsPath.geometry}
        material={materials["Material.003"]}
        position={[0.209, 0.659, 0.099]}
        rotation={[-Math.PI, 0.976, -Math.PI]}
        scale={0.494}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.NurbsPath001.geometry}
        material={materials["Material.003"]}
        position={[0.305, 0.659, 0.241]}
        rotation={[-Math.PI, 0.976, -Math.PI]}
        scale={0.494}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cableNorte.geometry}
        material={materials["Material.003"]}
        position={[0.209, 0.659, 0.099]}
        rotation={[-Math.PI, 0.976, -Math.PI]}
        scale={0.494}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cableSur.geometry}
        material={materials["Material.003"]}
        position={[0.305, 0.659, 0.241]}
        rotation={[-Math.PI, 0.976, -Math.PI]}
        scale={0.494}
      />
      <group rotation={[0,-90 * Math.PI / 180,0]}>

      <Interactive onSelect={showMore}>
        <group
          position={[2, 1.126, -1.5]}
          rotation={[Math.PI / 2, -0.035, 90 * Math.PI / 180]}
          scale={[0.266, 0.021, 0.109]}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube007.geometry}
            material={materials.BOX01}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube007_1.geometry}
            material={materials["TEXT.001"]}
          />
        </group>
      </Interactive>
      <Interactive onSelect={showLess}>
        <group
          position={[1.978, 1.115, -2.4]}
          rotation={[Math.PI / 2, -0.035, 90 * Math.PI / 180]}
          scale={0.052}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Text002.geometry}
            material={materials["TEXT.002"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Text002_1.geometry}
            material={materials.BOX01}
          />
        </group>
      </Interactive>
      </group>

      <group
        position={[0.105, 0.02, -0.12]}
        rotation={[0, (40 * Math.PI) / 180, 0]}
      >
        <instancedMesh>
          {points.slice(0, renderFields).map((points, index) => (
            <mesh
              key={"material-field" + index}
              castShadow
              receiveShadow
              geometry={nodes.fieldPrimary.geometry}
              material={materials["material-field"]}
              position={new THREE.Vector3(points[0], points[1], points[2])}
              rotation={[0, 0, (-90 * Math.PI) / 180]}
              scale={[-0.007, -0.121, -0.007]}
            />
          ))}
        </instancedMesh>
      </group>

      <group
        position={[0.433, 0.58, -1.6]}
        rotation={[0, -1.309, 0]}
        scale={0.046}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube008.geometry}
          material={materials.border}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube008_1.geometry}
          material={materials["display-desktop"]}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["let"].geometry}
        material={materials["let"]}
        position={[0.597, 0.821, -0.946]}
        scale={0.028}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.paper1.geometry}
        material={materials.paper}
        position={[0.148, 1.199, 1.972]}
        rotation={[Math.PI / 2, -1.414, 0]}
        scale={[0.493, 0.493, 0.322]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.paper2.geometry}
        material={materials.paper}
        position={[0.061, 1.199, 1.948]}
        rotation={[1.571, -1.557, 0]}
        scale={[0.493, 0.493, 0.322]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.paper3.geometry}
        material={materials.paper}
        position={[-0.008, 1.151, 1.939]}
        rotation={[-Math.PI / 2, -1.413, Math.PI]}
        scale={[0.493, 0.493, 0.322]}
      />
      <group position={[0.597, 0.532, -0.946]} scale={[0.18, 0.018, 0.18]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder.geometry}
          material={materials["Material.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder_1.geometry}
          material={materials["support-coocnet"]}
        />
      </group>
      <group position={[-0.888, 1.185, 0.984]} scale={[0.1, 0.535, 0.793]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube005.geometry}
          material={materials.border}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube005_1.geometry}
          material={materials["background-table"]}
        />
      </group>
      <group position={[-0.888, 1.185, -0.916]} scale={[0.1, 0.535, 0.793]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube009.geometry}
          material={materials.border}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube009_1.geometry}
          material={materials["background-table"]}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002.geometry}
        material={materials.wood}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002_1.geometry}
        material={materials.border}
      />
    </group>
  );
}

useGLTF.preload("/Models/lawfaraday/desktopAndInteractividad.glb");
